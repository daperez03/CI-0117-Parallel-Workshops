procedure main(argc, argv[]):
  if argc = 8 then
    shared unit_count := integer(argv[1])
    shared producer_count := integer(argv[2])
    shared consumer_count := integer(argv[3])
    shared producer_min_delay := integer(argv[4])
    shared producer_max_delay := integer(argv[5])
    shared consumer_min_delay := integer(argv[6])
    shared consumer_max_delay := integer(argv[7])

      //  Se crea una cola para mejor rendimiento respecto al espacio
    shared queue := create_integer_queue()
    shared can_access_queue := create_mutex()

    shared next_unit := 0
    shared can_access_next_unit := create_mutex()
    shared consumed_count := 0
    shared can_access_consumed_count := create_mutex()
      //  Hilos a crear, retorna arraglo de hilos
    declare producers := create_threads(producer_count, produce)
    declare consumers := create_threads(consumer_count, consume)

    shared can_consume := crate_semaphore(0)

      //  Espera por hilos
    join_threads(producers)
    join_threads(consumers)
  end if
end procedure

procedure produce0:
  declare my_unit = 0;
  declare is_there_pending_work = false;
  is_there_pending_work_produce0(&my_unit, &is_there_pending_work)
    //  revisa si aun falta trabajo por hacer
  while is_there_pending_work_produce0 do
      //  Produce su trabajo
    delay(random_between(producer_min_delay, producer_max_delay))
    lock(can_access_queue)
      enqueue(queue, my_unit)
    unlock(can_access_queue)
    print("Produced ", my_unit)
    is_there_pending_work_produce0(&my_unit, &is_there_pending_work)
  end while

end procedure

procedure is_there_pending_work_produce0(ptr_my_unit, ptr_is_there_pending_work){
  lock(can_access_next_unit)
    *ptr_is_there_pending_work := next_unit < unit_count
    if *ptr_is_there_pending_work then
        //  Hilo selecciona una unidad a trabajar
      next_unit := next_unit + 1
      *ptr_my_unit := next_unit
    end if
  unlock(can_access_next_unit)
}

procedure consume0:
  declare is_there_pending_work = false;
  is_there_pending_work_consume0(&is_there_pending_work)
    //  Revisa si aun hay algo que consumir
  while is_there_pending_work do
    wait(can_consume)
    lock(can_access_queue)
      declare my_unit := dequeue(queue)
    unlock(can_access_queue)
    print("\tConsuming ", my_unit)
      //  Consume la unidad
    delay(random_between(consumer_min_delay, consumer_max_delay))
    is_there_pending_work_consume0(&is_there_pending_work)
  end while
end procedure

procedure is_there_pending_work_consume0(ptr_is_there_pending_work):
  lock(can_access_consumed_count)
    *ptr_is_there_pending_work = consumed_count < unit_count
    if ptr_is_there_pending_work then
        //  Toma una unidad para consumir
      consumed_count := consumed_count + 1
    end if
  unlock(can_access_consumed_count)
end procedure


function random_between(min, max):
  return min + rand() % (max - min)
end function
