struct tools{
  array_prime_number
  size
  iterator
}

function solve(ptr_Global_Data_Structure) {
  for (i = 0 to ptr_Gptr_Global_Data_Structure->tools->iterator) {
    ptr_data_structure = ptr_data_structure->get_structure(i)
    new tools
    numPrimos(ptr_data_structure)
    combinaciones(ptr_data_structure)
  }

}


function numPrimos(ptr_data_structure) {
  tools->size = ptr_data_structure->number/2
  iterator := 0
  is_prime := true
  for(primeNumber = 0 to ptr_data_structure->number){
    for (j = 0 to integer(square(primeNumber) + 1) && is_prime){
      if (n%j) == 0{
        is_prime := False
      }else{
        is_prime := True
      }
    }
    if(is_prime){
      tools.array_prime_number.add(primeNumber)
    }
  }
}

function combinaciones(ptr_data_structure) {
  total_combinations := 0;
  if(ptr_data_structure->even_number) {
    for(i = 0 to tools->iterator){
      for(j = i to tools->iterator){
        total_combinations := total_combinations + 1
      }
    }
    ptr_data_structure->string_result add_front ( ptr_data_structure->number": " total_combinations "sums" )
  }else{
    for(i = 0 to tools->iterator){
      for(j = i to tools->iterator){
        for(h = j to tools->iterator){
          if(ptr_data_structure->number = array_prime_number[i] + array_prime_number[j] + array_prime_number[h]){
            total_combinations := total_combinations + 1
            ptr_data_structure->string_result add ( array_prime_number[i] + array_prime_number[j] + array_prime_number[h]" , ")
          }
        }
      }
    }
    ptr_data_structure->string_result add_front (ptr_data_structure->number": " total_combinations "sums: " )
  }
}
