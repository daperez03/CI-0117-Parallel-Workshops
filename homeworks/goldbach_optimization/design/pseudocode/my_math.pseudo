function solve(my_goldbach_sums) {
  while (true) {
    tools->count := 0
    lock(my_goldbach_sums->can_access_solution_count)
      if(my_goldbach_sums->solution_count < my_goldbach_sums->count){
        define my_solution := my_goldbach_sums->solution_count
        my_goldbach_sums->solution_count := my_goldbach_sums->solution_count + 1
      }else{
        unlock(my_goldbach_sums->can_access_solution_count)
        break while
      }
    unlock(my_goldbach_sums->can_access_solution_count)
    number_t := my_goldbach_sums->numbers[my_solution]
    combinations(number_t)
  }

}

function combinations(number_t) {
  if (number_t->number is even) {
    for (i = 0 to number_t->number/2) {
      define complement = number_t->number - i
      if (is_prime(i) && is_prime(complement)) save sums numbers
        if number_t->number is negative_t save sums
    }
  }else{
    for (i = 0 to number_t->number/2) {
      for (j = i to number_t->number/2) {
        define complement = number_t->number - i - j
        if (is_prime(i) && is_prime(j) && is_prime(complement)
          && complement >= i && complement >= j) save sums numbers
          if number_t->number is negative_t save sums
      }
    }
  }
}
