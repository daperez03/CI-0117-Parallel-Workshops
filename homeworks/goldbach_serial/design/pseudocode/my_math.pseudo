privated struct tools{
  array_prime_number[]
  count
}

function solve(my_goldbach_sums) {
  count := 0
  for (i = 0 to my_goldbach_sums->count) {
    number_t my_number_t = my_goldbach_sums->numbers[i]
    numPrimos(my_number_t)
    combinaciones(my_number_t)
  }

}


function numPrimos(my_number_t) {
  for(primeNumber = 0 to my_number_t->number){
    is_prime := True
    for (j = 0 to integer(square(primeNumber) + 1) && is_prime){
      if (primeNumber%j) = 0{
        is_prime := False
      }else{
        is_prime := True
      }
    }
    if(is_prime){
      tools->array_prime_number[count] := primeNumber
    }
  }
}

function combinaciones(my_number_t) {
  total_combinations := 0
  if (my_number_t->number is even) {

    for(i = 0 to tools->count){
      for(j = i to tools->count){
        if(my_number_t->number = tools->array_prime_number[i] + tools->array_prime_number[j]){
          if(my_number_t->result is negative_t){
            my_number_t->sums[my_number_t->sum_count] = tools->array_prime_number[i]
            my_number_t->sum_count := my_number_t->sum_count + 1;
            my_number_t->sums[my_number_t->sum_count] = tools->array_prime_number[j]
            my_number_t->sum_count := my_number_t->sum_count + 1;
          } else {
            my_number_t->sums[0] = my_number_t->sums[0] + 1
            my_number_t->sum_count := my_number_t->sum_count + 1;
          }
        }
      }
    }

  }else{

    for(i = 0 to tools->count){
      for(j = i to tools->count){
        for(h = j to tools->count){
          if(my_number_t->number = tools->array_prime_number[i] +
              tools->array_prime_number[j] + tools->array_prime_number[h]){
            if(my_number_t->result is negative_t){
              my_number_t->sums[my_number_t->sum_count] = tools->array_prime_number[i]
              my_number_t->sum_count := my_number_t->sum_count + 1
              my_number_t->sums[my_number_t->sum_count] = tools->array_prime_number[j]
              my_number_t->sum_count := my_number_t->sum_count + 1
              my_number_t->sums[my_number_t->sum_count] = tools->array_prime_number[h]
              my_number_t->sum_count := my_number_t->sum_count + 1
            }else{
              my_number_t->sums[0] = my_number_t->sums[0] + 1
              my_number_t->sum_count := my_number_t->sum_count + 1;
            }
          }
        }
      }
    }
  }
}
