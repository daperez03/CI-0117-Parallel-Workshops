function solve(my_goldbach_sums) {
  combinations(number_t)
}


function combinations(number_t) {
  if (number_t->number is even) {
    paralle for of block
    for (i = 0 to number_t->number/2) {
      define complement = number_t->number - i
      if (is_prime(i) && is_prime(complement)) save sums numbers
        if number_t->number is negative_t save sums
    }
    for (i = 0 to number of threads) number_t of thread to global number_t
  }else{
    paralle for of block
    for (i = 0 to number_t->number/2) {
      for (j = i to number_t->number/2) {
        define complement = number_t->number - i - j
        if (is_prime(i) && is_prime(j) && is_prime(complement)
          && complement >= i && complement >= j) save sums numbers
          if number_t->number is negative_t save sums
      }
    }
    for (i = 0 to number of threads) number_t of thread to global number_t
  }
}
